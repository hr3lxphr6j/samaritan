// Code generated by MockGen. DO NOT EDIT.
// Source: compressor.go

// Package compressor is a generated GoMock package.
package compressor

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// Mockcompressor is a mock of compressor interface
type Mockcompressor struct {
	ctrl     *gomock.Controller
	recorder *MockcompressorMockRecorder
}

// MockcompressorMockRecorder is the mock recorder for Mockcompressor
type MockcompressorMockRecorder struct {
	mock *Mockcompressor
}

// NewMockcompressor creates a new mock instance
func NewMockcompressor(ctrl *gomock.Controller) *Mockcompressor {
	mock := &Mockcompressor{ctrl: ctrl}
	mock.recorder = &MockcompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockcompressor) EXPECT() *MockcompressorMockRecorder {
	return m.recorder
}

// NewWriter mocks base method
func (m *Mockcompressor) NewWriter(w io.Writer) io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", w)
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriter indicates an expected call of NewWriter
func (mr *MockcompressorMockRecorder) NewWriter(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*Mockcompressor)(nil).NewWriter), w)
}

// NewReader mocks base method
func (m *Mockcompressor) NewReader(r io.Reader) io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// NewReader indicates an expected call of NewReader
func (mr *MockcompressorMockRecorder) NewReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*Mockcompressor)(nil).NewReader), r)
}
